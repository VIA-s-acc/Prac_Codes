{
    "global_info":
    {
        "link_to_api": null, 
        "api_key": null,
        "page": "home page of the https://github.com/VIA-s-acc/Prac_Codes api",
        "github": "https://github.com/VIA-s-acc/Prac_Codes",
        "libs": {
                "lineq": ["matrix_methods", "generator", "checker"]
            },
        "version": {
            "major": 0, 
            "minor": 1,
            "build": "Alpha",
            "snap": 2,
            "shortcut": "API-v0.1A2",
            "explanation": "Second snapshot of API v0.1 Alpha build"
        },
        "GlobalRet":
        {
            "headers": {},
            "path": null,
            "full_path": null,
            "script_root": null,
            "url": null,
            "base_url": null,
            "url_root": null,
            "host_url": null,
            "host": null,
            "method": null
        }
    },    

    "Instructions": {
        "Return note":
        {
            "note": "All functions returns -> function return ( you can see it in data[Instructions][module_short][function_short][returns] ) and global return -> return[global_info] ( you can see in data[Instructions][Note][global_return] ) ",
            "global_return": 
            {   "link_to_api": "link_to_api",
                "api_key": "api_key",
                "GlobalRet": 
                {
                    "headers": "request.headers",
                    "path": "request.path",
                    "full_path": "request.full_path",
                    "script_root": "request.script_root",
                    "url": "request.url",
                    "base_url": "request.base_url",
                    "url_root": "request.url_root",
                    "host_url": "request.host_url",
                    "host": "request.host",
                    "method": "request.method"
                }
            
            }
        },
        "lineq module (shortcut: lineq)":
        {
            "Determinant calculator (shortcut: det)": 
                {
                    "name": "/det/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix": "matrix POST data ( type(str) or type(list) )"
                            },
                            "pattern": "link_to_api/det/?type=type&matrix=matrix ( list or str )"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/det/?matrix=1 2 3\n4 5 6\n7 8 9",
                            "example_list": "link_to_api/det/?type=list&matrix=[[1,2,3],[4,5,6],[7,8,9]]"
                        },
                    "returns": {
                            "result": "Determinant of the matrix (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "matrix": "Input matrix", 
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }

                },
            "Maximal element of the matrix (shortcut: maxm)": 
                {
                    "name": "/max_m/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix": "matrix POST data ( type(str) or type(list) )"
                            },
                            "pattern": "link_to_api/max_m/?type=type&matrix=matrix ( list or str )"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/max_m/?matrix=1 2 3\n4 5 6\n7 8 9",
                            "example_list": "link_to_api/max_m/?type=list&matrix=[[1,2,3],[4,5,6],[7,8,9]]"
                        },
                    "returns": {
                            "result": "Maximal element of the matrix (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "matrix": "Input matrix", 
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
                },
            "LU decomposition (shortcut: lu)": 
                {
                    "name": "/lu/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix": "matrix POST data ( type(str) or type(list) )"
                            },
                            "pattern": "link_to_api/lu/?type=type&matrix=matrix ( list or str )"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/lu/?matrix=1 2 3\n4 5 6\n7 8 9",
                            "example_list": "link_to_api/lu/?type=list&matrix=[[1,2,3],[4,5,6],[7,8,9]]"
                        },
                    "returns": {
                            "result": "LU decomposition of the matrix dict('l',: (None if error), 'u',: (None if error))", 
                            "error": "Error | NULL if not occupied", 
                            "matrix": "Input matrix", 
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
                },
            "Cholesky decomposition v1 (A = LL^*) (shortcut: chl1)": 
                {
                    "name": "/cholv1/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix": "matrix POST data ( type(str) or type(list) )"
                            },
                            "pattern": "link_to_api/cholv1/?type=type&matrix=matrix ( list or str )"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/cholv1/?matrix=1 2 3\n4 5 6\n7 8 9",
                            "example_list": "link_to_api/cholv1/?type=list&matrix=[[1,2,3],[4,5,6],[7,8,9]]"
                        },
                    "returns": {
                            "result": "Cholesky decomposition of the matrix dict('l',: (None if error), 'u',: (None if error))", 
                            "error": "Error | NULL if not occupied", 
                            "matrix": "Input matrix", 
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
                },
            "Cholesky decomposition v2 (A = LDL^*) (shortcut: chl2)": 
                {
                    "name": "/cholv2/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix": "matrix POST data ( type(str) or type(list) )"
                            },
                            "pattern": "link_to_api/cholv2/?type=type&matrix=matrix ( list or str )"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/cholv2/?matrix=1 2 3\n4 5 6\n7 8 9",
                            "example_list": "link_to_api/cholv2/?type=list&matrix=[[1,2,3],[4,5,6],[7,8,9]]"
                        },
                    "returns": {
                            "result": "Cholesky decomposition of the matrix dict('l': (None if error), 'd': (None if error), 'u': (None if error))", 
                            "error": "Error | NULL if not occupied", 
                            "matrix": "Input matrix", 
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
                },
            "Inverse matrix (A_I*A = E) (shortcut: inv)": 
                {
                    "name": "/inv/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix": "matrix POST data ( type(str) or type(list) )"
                            },
                            "pattern": "link_to_api/inv/?type=type&matrix=matrix ( list or str )"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/inv/?matrix=1 2 3\n4 5 6\n7 8 9",
                            "example_list": "link_to_api/inv/?type=list&matrix=[[1,2,3],[4,5,6],[7,8,9]]"
                        },
                    "returns": {
                            "result": "inverted matrix (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "matrix": "Input matrix", 
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }

                },
            "Sum of matrices (R = A + B) (shortcut: summ)": 
                {
                    "name": "/sum_m/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix1": "matrix1 POST data ( type(str) or type(list) )",
                                "matrix2": "matrix2 POST data ( type(str) or type(list) )"
                            },
                            "pattern": "link_to_api/sum_m/?type=type&matrix1=matrix1&matrix2=matrix2 ( list or str )"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/sum_m/?matrix1=1 2 3\n4 5 6\n7 8 9&matrix2 = 1 2 3\n4 5 6\n7 8 9",
                            "example_list": "link_to_api/sum_m/?type=list&matrix1=[[2,2,3],[4,5,5],[7,1.2,7]]&matrix2=[[1,2,3],[7,4,6],[7,1.2,7]]"
                        },
                    "returns": {
                            "result": "Sum matrix (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "matrix1": "Input matrix1",
                            "matrix2": "Input matrix2", 
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
                },
            "Multiplication of matrices (R = A * B) (shortcut: multm)": 
                {
                    "name": "/mult_m/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix1": "matrix1 POST data ( type(str) or type(list) )",
                                "matrix2": "matrix2 POST data ( type(str) or type(list) )"
                            },
                            "pattern": "link_to_api/mult_m/?type=type&matrix1=matrix1&matrix2=matrix2 ( list or str )"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/mult_m/?matrix1=1 2 3\n4 5 6\n7 8 9&matrix2 = 1 2 3\n4 5 6\n7 8 9",
                            "example_list": "link_to_api/mult_m/?type=list&matrix1=[[2,2,3],[4,5,5],[7,1.2,7]]&matrix2=[[1,2,3],[7,4,6],[7,1.2,7]]"
                        },
                    "returns": {
                            "result": "Multiplication matrix (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "matrix1": "Input matrix1",
                            "matrix2": "Input matrix2", 
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "calculating time"
                    }
                },
            "Multiplication of matrice to scalar (R = A * scalar) (shortcut: multms)":
                {
                    "name": "/mult_m/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix1": "matrix POST data ( type(str) or type(list) )",
                                "double": "double POST data ( int | float )"
                            },
                            "pattern": "link_to_api/mult_m_s/?type=type&matrix=matrix1&double=double ( list or str for matrix, int or float for double )"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/mult_m_s/?matrix=1 2 3\n4 5 6\n7 8 9&double=1.23",
                            "example_list": "link_to_api/mult_m_s/?type=list&matrix=[[2,2,3],[4,5,5],[7,1.2,7]]&double=1.23"
                        },
                    "returns": {
                            "result": "Multiplication matrix (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "matrix": "Input matrix",
                            "double": "Input double", 
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "calculating time"
                    }
                },
            "Signum calculator (shortcut: sig)": 
                {
                    "name": "/sig/",
                    "use": 
                        {
                            "args": {
                                "double": "double POST data ( int | float )"
                            },
                            "pattern": "link_to_api/sig/?double=double"
                        },
                    "Examples":
                        {
                            "example": "link_to_api/sig/?double=1.23"
                        },
                    "returns": {
                            "result": "Signum (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "double": "Input double",
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
                },
            "Absolute value calculator (shortcut: abs)": 
                {
                    "name": "/abs/",
                    "use": 
                        {
                            "args": {
                                "double": "double POST data ( int | float )"
                            },
                            "pattern": "link_to_api/abs/?double=double"
                        },
                    "Examples":
                        {
                            "example": "link_to_api/abs/?double=1.23"
                        },
                    "returns": {
                            "result": "abs value (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "double": "Input double",
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
                },
            "Random value in range from dmin to dmax (shortcut: rnd)": 
                {
                    "name": "/rand/",
                    "use": 
                        {
                            "args": {
                                "dmin": "double1 POST data ( int | float )",
                                "dmax": "double2 POST data ( int | float )"
                            },
                            "pattern": "link_to_api/rand/?dmin=dmin&dmax=dmax"
                        },
                    "Examples":
                        {
                            "example": "link_to_api/rand/?dmin1=1.23&dmax=1.43"
                        },
                    "returns": {
                            "result": "rand value (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "dmin": "Input double minimal (from dmin to dmax)",
                            "dmax": "Input double max",
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
                },
            "Get (max, min) eigenvalues and eigenvectors of matrix (shortcut: eigmm)":
                {
                    "name": "/eig_mm/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix": "matrix POST data ( type(str) or type(list) )",
                                "itern": "int POST data ( int )",
                                "tol": "double POST data ( int | float )"
                            },
                            "pattern": "link_to_api/eig_mm/?type=type&matrix=matrix1&itern=itern&tol=double ( list or str for matrix, int or float for double )"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/eig_mm/?matrix=1 2 3\n4 5 6\n7 8 9&itern=10&tol=0.01",
                            "example_list": "link_to_api/eig_mm/?type=list&matrix=[[2,2,3],[4,5,5],[7,1.2,7]]&itern=10&tol=0.01"
                        },
                    "returns": {
                            "result": "max, min eigenvalues and eigenvectors of matrix -> dict('max': {'eigenvalue': eigenvalue, 'eigenvector': eigenvector}, 'min': {'eigenvalue': eigenvalue, 'eigenvector': eigenvector}) (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "matrix": "Input matrix",
                            "iternm": "Input int itern",
                            "tol": "Input double tol", 
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "calculating time"
                    }
                },
            "Get vector norm (shortcut: norm)":
                {
                    "name": "/norm/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "vector": "vector POST data ( type(str) or type(list) )"
                            },
                            "pattern": "link_to_api/norm/?type=type&vector=vector ( list or str for vector)"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/norm/?vector=1 2 3",
                            "example_list": "link_to_api/norm/?type=list&vector=[1,2,3]"
                        },
                    "returns": {
                            "result": "vector norm (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "vector": "Input vector",
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "calculating time"
                    }
                },
            "Approx two vectors (shortcut: approx)":
                {
                    "name": "/approx/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "vector1": "vector1 POST data ( type(str) or type(list) )",
                                "vector2": "vector2 POST data ( type(str) or type(list) )"
                            },
                            "pattern": "link_to_api/approx/?type=type&vector1=vector1&vector2=vector2 ( list or str for vector)"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/approx/?vector1=1 2 3&vector2=4 5 6",
                            "example_list": "link_to_api/approx/?type=list&vector1=[1,2,3]&vector2=[4,5,6]"
                        },
                    "returns": {
                            "result": "Approx result [True, False] (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "vector": "Input vector",
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "calculating time"
                    }
                }
        },
        "generator module (shortcut: gntr)":
        {
            "Generate random matrix (shortcut: rndm)":
                {
                    "name": "/rand_m/",
                    "use": 
                        {
                            "args": {
                                "size": "size of matrix (NxN) (int)",
                                "rng": "range for random numbers (double) (a_ij may be in [min_rng, max_rng])",
                                "mode": "Mode for matrix generating -> mode_list = ['default': base random, '3diag': three diagonal, 'symm': symmetric] (str)"
                            },
                            "pattern": "link_to_api/rand_m/?size=size&rng=rng&mode=mode"
                        },
                    "Examples":
                        {
                            "example": "link_to_api/rand_m/?size=25&rng=1.132&mode=3diag",
                        },
                    "returns": {
                            "result": "Generated matrix (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "size": "Input size",
                            "rng": "Input rng",
                            "mode": "Input mode", 
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
                },
            "Generate random vector (shortcut: rndm)":
                {
                    "name": "/rand_v/",
                    "use": 
                        {
                            "args": {
                                "size": "size of vector (1xN) (int)",
                                "rng": "range for random numbers (double) (a_i may be in [min_rng, max_rng])",
                            },
                            "pattern": "link_to_api/rand_v/?size=size&rng=rng"
                        },
                    "Examples":
                        {
                            "example": "link_to_api/rand_v/?size=25&rng=1.132",
                        },
                    "returns": {
                            "result": "Generated vector (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "size": "Input size",
                            "rng": "Input rng",
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
            }
        },
        "checker module (shortcut: chk)":
        {
            "Diagonal dominance (shortcut: dd)":
                {
                    "name": "/chk_dd/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix": "matrix POST data ( type(str) or type(list) )"
                            },
                            "pattern": "link_to_api/chk_dd/?type=type&matrix=matrix ( list or str for matrix)"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/chk_dd/?matrix=1 2 3\n4 5 6\n7 8 9",
                            "example_list": "link_to_api/chk_dd/?type=list&matrix=[[1,2,3],[4,5,6],[7,8,9]]"
                        },
                    "returns": {
                            "result": "Checker result (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "matrix": "Input matrix",
                            "type": "Input type",
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
                },
            "Positive definite (sylvesters criterion) (shortcut: pd)":
                {
                    "name": "/chk_pd/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix": "matrix POST data ( type(str) or type(list) )"
                            },
                            "pattern": "link_to_api/chk_pd/?type=type&matrix=matrix ( list or str for matrix)"
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/chk_pd/?matrix=1 2 3\n4 5 6\n7 8 9",
                            "example_list": "link_to_api/chk_pd/?type=list&matrix=[[1,2,3],[4,5,6],[7,8,9]]"
                        },
                    "returns": {
                            "result": "Checker result (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "matrix": "Input matrix",
                            "type": "Input type",
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
                },
            "Symmetric (shortcut: sy)":
                {
                    "name": "/chk_sy/",
                    "use": 
                        {
                            "args": {
                                "type": "type POST data ( 'str' or 'list' )",
                                "matrix": "matrix POST data ( type(str) or type(list) )"
                            }
                        },
                    "Examples":
                        {
                            "example_str": "link_to_api/chk_sy/?matrix=1 2 3\n4 5 6\n7 8 9",
                            "example_list": "link_to_api/chk_sy/?type=list&matrix=[[1,2,3],[4,5,6],[7,8,9]]"
                        },
                    "returns": {
                            "result": "Checker result (NULL if error)", 
                            "error": "Error | NULL if not occupied", 
                            "matrix": "Input matrix",
                            "type": "Input type",
                            "spent": "Spent until end of processing", 
                            "result_calc_time": "Calculating time"
                    }
                }
        }
    }
}